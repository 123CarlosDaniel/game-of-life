generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                       String    @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.Text
  access_token             String?   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime? @default(now()) @updatedAt
  user                     user      @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model comment {
  id         String   @id
  opinion    String?  @db.Text
  ownerId    String
  creationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  creation   creation @relation(fields: [creationId], references: [id], map: "Comment_creationId_fkey")
  user       user     @relation(fields: [ownerId], references: [id], map: "Comment_ownerId_fkey")

  @@index([creationId], map: "Comment_creationId_fkey")
  @@index([ownerId], map: "Comment_ownerId_fkey")
}

model creation {
  id          String    @id
  ownerId     String
  title       String
  description String?   @db.Text
  data        Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  comments    comment[]
  user        user      @relation(fields: [ownerId], references: [id], map: "Creation_ownerId_fkey")

  @@index([ownerId], map: "Creation_ownerId_fkey")
}

model reaction {
  id         String   @id
  ownerId    String
  creationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       user     @relation(fields: [ownerId], references: [id], map: "Reaction_ownerId_fkey")

  @@index([ownerId], map: "Reaction_ownerId_fkey")
}

model user {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique(map: "User_username_key")
  email         String?    @unique(map: "User_email_key")
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @default(now()) @updatedAt
  accounts      account[]
  comments      comment[]
  creations     creation[]
  reactions     reaction[]
}
